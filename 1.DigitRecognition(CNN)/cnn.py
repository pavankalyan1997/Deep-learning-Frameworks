# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iyYzNv6RyATeycSiyhcEywzDYuFRh4ve
"""

import math
import numpy as np
import h5py
import matplotlib.pyplot as plt
import scipy
import random
import warnings
warnings.filterwarnings("ignore")

from PIL import Image
from scipy import ndimage
import tensorflow as tf
from tensorflow.python.framework import ops

# %matplotlib inline
np.random.seed(1)

#load data set from sklearn.datasets
from sklearn.datasets import load_digits

digits=load_digits()

plt.imshow(digits.images[0])

images_and_labels=list(zip(digits.images,digits.target))
plt.figure(figsize=(5,5))
for index,(image,label) in enumerate(images_and_labels[:15]):
    plt.subplot(3,5,index+1)
    plt.axis('off')
    plt.imshow(image,cmap=plt.cm.gray_r,interpolation='nearest')
    plt.title('%i' % label)

X=digits.images
y=digits.target

X=X.reshape(X.shape[0],X.shape[1],X.shape[2],1)

print(X.shape)

print(y.shape)

X=X/255

X[0]

y=y.reshape(y.shape[0],1)
print(y.shape)

y_encoded=np.zeros((y.shape[0],10))
for i in range(y_encoded.shape[0]):
    y_encoded[i][y[i][0]]=1
y=y_encoded.copy()

print(y.shape)

y[0]

train_size=int(X.shape[0]*0.8)
test_size=X.shape[0]-train_size
train_indices=random.sample(range(0,X.shape[0]),train_size)
test_indices=[i for i in range(0,X.shape[0]) if i not in train_indices]
X_train=X[train_indices]
Y_train=y[train_indices]
X_test=X[test_indices]
Y_test=y[test_indices]

print ("number of training examples = " + str(X_train.shape[0]))
print ("number of test examples = " + str(X_test.shape[0]))
print ("X_train shape: " + str(X_train.shape))
print ("Y_train shape: " + str(Y_train.shape))
print ("X_test shape: " + str(X_test.shape))
print ("Y_test shape: " + str(Y_test.shape))

def create_placeholders(n_H0,n_W0,n_C0,n_y):
    X=tf.placeholder(tf.float64,[None,n_H0,n_W0,n_C0])
    Y=tf.placeholder(tf.float64,[None,n_y])
    return X,Y

X_p,Y_p=create_placeholders(8,8,1,10)
print("X= "+ str(X_p))
print("Y= "+str(Y_p))

def initialize_parameters():
    tf.set_random_seed(1)
    W1=tf.get_variable("W1",[4,4,1,8],dtype=tf.float64,initializer=tf.contrib.layers.xavier_initializer(seed=0))
    W2=tf.get_variable("W2",[2,2,8,16],dtype=tf.float64,initializer=tf.contrib.layers.xavier_initializer(seed=0))
    parameters={"W1":W1,"W2":W2}
    return parameters

tf.reset_default_graph()
with tf.Session() as sess_test:
    parameters = initialize_parameters()
    init = tf.global_variables_initializer()
    sess_test.run(init)
    print("W1 = " + str(parameters["W1"].eval()[1,1]))
    print("W2 = " + str(parameters["W2"].eval()[1,1,1]))

def forward_propagation(X, parameters):
    W1 = parameters['W1']
    W2 = parameters['W2']
    Z1 = tf.nn.conv2d(X,W1,strides = [1,1,1,1], padding = 'SAME')
    A1 = tf.nn.relu(Z1)
    P1 = tf.nn.max_pool(A1, ksize = [1,8,8,1], strides = [1,8,8,1], padding = 'SAME')
    Z2 = tf.nn.conv2d(P1,W2,strides = [1,1,1,1], padding = 'SAME')
    A2 = tf.nn.relu(Z2)
    P2 = tf.nn.max_pool(A2, ksize = [1,4,4,1], strides = [1,4,4,1], padding = 'SAME')
    P2 = tf.contrib.layers.flatten(P2)
    Z3 = tf.contrib.layers.fully_connected(P2,10,activation_fn=None)
    return Z3

tf.reset_default_graph()
with tf.Session() as sess:
    np.random.seed(1)
    X_p,Y_p=create_placeholders(8,8,1,10)
    parameters = initialize_parameters()
    Z3 = forward_propagation(X_p, parameters)
    init = tf.global_variables_initializer()
    sess.run(init)
    a = sess.run(Z3, {X_p: X_train, Y_p: Y_train})
    print("Z3 = " + str(a))

def compute_cost(Z3,Y):
  cost=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=Z3,labels=Y))
  return cost

tf.reset_default_graph()
with tf.Session() as sess:
    np.random.seed(1)
    X_p,Y_p=create_placeholders(8,8,1,10)
    parameters = initialize_parameters()
    Z3 = forward_propagation(X_p, parameters)
    cost = compute_cost(Z3, Y_train)
    init = tf.global_variables_initializer()
    sess.run(init)
    a = sess.run(cost, {X_p: X_train, Y_p: Y_train})
    print("cost = " + str(a))

def random_mini_batches(X, Y, mini_batch_size = 64, seed = 0):
    np.random.seed(seed)            
    m = X.shape[0]                  
    mini_batches = []
    # Step 1: Shuffle (X, Y)
    permutation = list(np.random.permutation(m))
    shuffled_X = X[permutation]
    shuffled_Y = Y[permutation]
    # Step 2: Partition (shuffled_X, shuffled_Y). Minus the end case.
    num_complete_minibatches = math.floor(m/mini_batch_size) # number of mini batches of size mini_batch_size in your partitionning
    for k in range(0, num_complete_minibatches):
        mini_batch_X = shuffled_X[k*mini_batch_size:(k+1)*mini_batch_size]
        mini_batch_Y = shuffled_Y[k*mini_batch_size:(k+1)*mini_batch_size]
        mini_batch = (mini_batch_X, mini_batch_Y)
        mini_batches.append(mini_batch)
    
    # Handling the end case (last mini-batch < mini_batch_size)
    if m % mini_batch_size != 0:
        mini_batch_X = shuffled_X[(mini_batch_size*math.floor(m/mini_batch_size)):]
        mini_batch_Y = shuffled_Y[(mini_batch_size*math.floor(m/mini_batch_size)):]
        mini_batch = (mini_batch_X, mini_batch_Y)
        mini_batches.append(mini_batch)
    
    return mini_batches

minibatches=random_mini_batches(X_train,Y_train,64,2)

minibatch=minibatches[0]
(minibatch_X,minibatch_Y)=minibatch
print(minibatch_X.shape)
print(minibatch_Y.shape)

def model(X_train,Y_train,X_test,Y_test,learning_rate=0.009,num_epochs=100,minibatch_size=64,print_cost=True):
  ops.reset_default_graph()
  tf.set_random_seed(1)
  seed=3
  #useful variables
  (m,n_H0,n_W0,n_C0)=X_train.shape
  n_y=Y_train.shape[1]
  costs=[]
  
  #create placeholders
  X,Y=create_placeholders(n_H0,n_W0,n_C0,n_y)
  
  #initialize parameters
  
  parameters=initialize_parameters()
  
  #forward propagation
  
  Z3= forward_propagation(X, parameters)
  
  # compute cost
  cost=compute_cost(Z3,Y)
  
  #Back proapagation
  optimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost)
  
  init=tf.global_variables_initializer()
  
  with tf.Session() as sess:
    sess.run(init)
    for epoch in range(num_epochs):
      minibatch_cost=0
      num_minibatches=int(m/minibatch_size)
      seed=seed+1
      minibatches=random_mini_batches(X_train,Y_train,minibatch_size,seed)
      for minibatch in minibatches:
        (minibatch_X,minibatch_Y)=minibatch
        _,temp_cost=sess.run([optimizer,cost],feed_dict={X:minibatch_X,Y:minibatch_Y})
        minibatch_cost+=(temp_cost/num_minibatches)
      if print_cost==True and epoch%5==0:
        print ("Cost after epoch %i: %f" % (epoch, minibatch_cost))
      if print_cost==True and epoch%1==0:
        costs.append(minibatch_cost)
        
    #plot the cost
    plt.plot(np.squeeze(costs))
    plt.ylabel('cost')
    plt.xlabel('iterations (per tens)')
    plt.title("Learning rate =" + str(learning_rate))
    plt.show()
    
    # Calculate the correct predictions
    predict_op = tf.argmax(Z3, 1)
    correct_prediction = tf.equal(predict_op, tf.argmax(Y, 1))

    # Calculate accuracy on the test set
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))
    print(accuracy)
    train_accuracy = accuracy.eval({X: X_train, Y: Y_train})
    test_accuracy = accuracy.eval({X: X_test, Y: Y_test})
    print("Train Accuracy:", train_accuracy)
    print("Test Accuracy:", test_accuracy)
    
    
    
    return train_accuracy,test_accuracy,parameters

_, _, parameters = model(X_train, Y_train, X_test, Y_test)

